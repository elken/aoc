{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Problem", :emoji nil, :path "#problem", :items []} {:title "Solution", :emoji nil, :path "#solution", :items [{:title "Functions", :emoji nil, :path "#functions", :items [{:title "combo-operand", :emoji nil, :path "#combo-operand", :items []} {:title "adv", :emoji nil, :path "#adv", :items []} {:title "bxl", :emoji nil, :path "#bxl", :items []} {:title "bst", :emoji nil, :path "#bst", :items []} {:title "jnz", :emoji nil, :path "#jnz", :items []} {:title "bxc", :emoji nil, :path "#bxc", :items []} {:title "out", :emoji nil, :path "#out", :items []} {:title "bdv", :emoji nil, :path "#bdv", :items []} {:title "cdv", :emoji nil, :path "#cdv", :items []} {:title "run-instructions", :emoji nil, :path "#run-instructions", :items []} {:title "dfs", :emoji nil, :path "#dfs", :items []}]} {:title "Part 1", :emoji nil, :path "#part-1", :items []} {:title "Part 2", :emoji nil, :path "#part-2", :items []}]}], :nextjournal/render-opts {:toc-visibility true, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility true, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns solutions.2024.day17), :file "src/solutions/2024/day17.clj", :scope solutions.2024.day17, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/elken/aoc/blob/45b0a02227976458aa49bd018085558acac90e63/src/solutions/2024/day17.clj"} "src/solutions/2024/day17.clj" [:<> "@" [:span.tabular-nums "45b0a02"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Problem", :description "Waited 17 days for this one!"}, :title "Problem", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"} ["h1" {:id "problem"} [:<> "Problem"]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:div {:dangerouslySetInnerHTML {:__html "<article class=\"day-desc\"><h2>--- Day 17: Chronospatial Computer ---</h2><p>The Historians push the button on their strange device, but this time, you all just feel like you're <a href=\"/2018/day/6\">falling</a>.</p>\n<p>&quot;Situation critical&quot;, the device announces in a familiar voice. &quot;Bootstrapping process failed. Initializing debugger....&quot;</p>\n<p>The small handheld device suddenly unfolds into an entire computer! The Historians look around nervously before one of them tosses it to you.</p>\n<p>This seems to be a 3-bit computer: its program is a list of 3-bit numbers (0 through 7), like <code>0,1,2,3</code>. The computer also has three <em>registers</em> named <code>A</code>, <code>B</code>, and <code>C</code>, but these registers aren't limited to 3 bits and can instead hold any integer.</p>\n<p>The computer knows <em>eight instructions</em>, each identified by a 3-bit number (called the instruction's <em>opcode</em>). Each instruction also reads the 3-bit number after it as an input; this is called its <em>operand</em>.</p>\n<p>A number called the <em>instruction pointer</em> identifies the position in the program from which the next opcode will be read; it starts at <code>0</code>, pointing at the first 3-bit number in the program. Except for jump instructions, the instruction pointer increases by <code>2</code> after each instruction is processed (to move past the instruction's opcode and its operand). If the computer tries to read an opcode past the end of the program, it instead <em>halts</em>.</p>\n<p>So, the program <code>0,1,2,3</code> would run the instruction whose opcode is <code>0</code> and pass it the operand <code>1</code>, then run the instruction having opcode <code>2</code> and pass it the operand <code>3</code>, then halt.</p>\n<p>There are two types of operands; each instruction specifies the type of its operand. The value of a <em>literal operand</em> is the operand itself. For example, the value of the literal operand <code>7</code> is the number <code>7</code>. The value of a <em>combo operand</em> can be found as follows:</p>\n<ul>\n<li>Combo operands <code>0</code> through <code>3</code> represent literal values <code>0</code> through <code>3</code>.</li>\n<li>Combo operand <code>4</code> represents the value of register <code>A</code>.</li>\n<li>Combo operand <code>5</code> represents the value of register <code>B</code>.</li>\n<li>Combo operand <code>6</code> represents the value of register <code>C</code>.</li>\n<li>Combo operand <code>7</code> is reserved and will not appear in valid programs.</li>\n</ul>\n<p>The eight instructions are as follows:</p>\n<p>The <code><em>adv</em></code> instruction (opcode <code><em>0</em></code>) performs <em>division</em>. The numerator is the value in the <code>A</code> register. The denominator is found by raising 2 to the power of the instruction's <em>combo</em> operand. (So, an operand of <code>2</code> would divide <code>A</code> by <code>4</code> (<code>2^2</code>); an operand of <code>5</code> would divide <code>A</code> by <code>2^B</code>.) The result of the division operation is <em>truncated</em> to an integer and then written to the <code>A</code> register.</p>\n<p>The <code><em>bxl</em></code> instruction (opcode <code><em>1</em></code>) calculates the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\" target=\"_blank\">bitwise XOR</a> of register <code>B</code> and the instruction's <em>literal</em> operand, then stores the result in register <code>B</code>.</p>\n<p>The <code><em>bst</em></code> instruction (opcode <code><em>2</em></code>) calculates the value of its <em>combo</em> operand <a href=\"https://en.wikipedia.org/wiki/Modulo\" target=\"_blank\">modulo</a> 8 (thereby keeping only its lowest 3 bits), then writes that value to the <code>B</code> register.</p>\n<p>The <code><em>jnz</em></code> instruction (opcode <code><em>3</em></code>) does <em>nothing</em> if the <code>A</code> register is <code>0</code>. However, if the <code>A</code> register is <em>not zero</em>, it <span title=\"The instruction does this using a little trampoline.\"><em>jumps</em></span> by setting the instruction pointer to the value of its <em>literal</em> operand; if this instruction jumps, the instruction pointer is <em>not</em> increased by <code>2</code> after this instruction.</p>\n<p>The <code><em>bxc</em></code> instruction (opcode <code><em>4</em></code>) calculates the <em>bitwise XOR</em> of register <code>B</code> and register <code>C</code>, then stores the result in register <code>B</code>. (For legacy reasons, this instruction reads an operand but <em>ignores</em> it.)</p>\n<p>The <code><em>out</em></code> instruction (opcode <code><em>5</em></code>) calculates the value of its <em>combo</em> operand modulo 8, then <em>outputs</em> that value. (If a program outputs multiple values, they are separated by commas.)</p>\n<p>The <code><em>bdv</em></code> instruction (opcode <code><em>6</em></code>) works exactly like the <code>adv</code> instruction except that the result is stored in the <em><code>B</code> register</em>. (The numerator is still read from the <code>A</code> register.)</p>\n<p>The <code><em>cdv</em></code> instruction (opcode <code><em>7</em></code>) works exactly like the <code>adv</code> instruction except that the result is stored in the <em><code>C</code> register</em>. (The numerator is still read from the <code>A</code> register.)</p>\n<p>Here are some examples of instruction operation:</p>\n<ul>\n<li>If register <code>C</code> contains <code>9</code>, the program <code>2,6</code> would set register <code>B</code> to <code>1</code>.</li>\n<li>If register <code>A</code> contains <code>10</code>, the program <code>5,0,5,1,5,4</code> would output <code>0,1,2</code>.</li>\n<li>If register <code>A</code> contains <code>2024</code>, the program <code>0,1,5,4,3,0</code> would output <code>4,2,5,6,7,7,7,7,3,1,0</code> and leave <code>0</code> in register <code>A</code>.</li>\n<li>If register <code>B</code> contains <code>29</code>, the program <code>1,7</code> would set register <code>B</code> to <code>26</code>.</li>\n<li>If register <code>B</code> contains <code>2024</code> and register <code>C</code> contains <code>43690</code>, the program <code>4,0</code> would set register <code>B</code> to <code>44354</code>.</li>\n</ul>\n<p>The Historians' strange device has finished initializing its debugger and is displaying some <em>information about the program it is trying to run</em> (your puzzle input). For example:</p>\n<pre><code>Register A: 729\nRegister B: 0\nRegister C: 0\n\nProgram: 0,1,5,4,3,0\n</code></pre>\n<p>Your first task is to <em>determine what the program is trying to output</em>. To do this, initialize the registers to the given values, then run the given program, collecting any output produced by <code>out</code> instructions. (Always join the values produced by <code>out</code> instructions with commas.) After the above program halts, its final output will be <code><em>4,6,3,5,6,3,5,2,1,0</em></code>.</p>\n<p>Using the information provided by the debugger, initialize the registers to the given values, then run the program. Once it halts, <em>what do you get if you use commas to join the values it output into a single string?</em></p>\n</article><article class=\"day-desc\"><h2 id=\"part2\">--- Part Two ---</h2><p>Digging deeper in the device's manual, you discover the problem: this program is supposed to <em>output another copy of the program</em>! Unfortunately, the value in register <code>A</code> seems to have been corrupted. You'll need to find a new value to which you can initialize register <code>A</code> so that the program's output instructions produce an exact copy of the program itself.</p>\n<p>For example:</p>\n<pre><code>Register A: 2024\nRegister B: 0\nRegister C: 0\n\nProgram: 0,3,5,4,3,0\n</code></pre>\n<p>This program outputs a copy of itself if register <code>A</code> is instead initialized to <code><em>117440</em></code>. (The original initial value of register <code>A</code>, <code>2024</code>, is ignored.)</p>\n<p><em>What is the lowest positive initial value for register <code>A</code> that causes the program to output a copy of itself?</em></p>\n</article>"}}], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "solutions.2024.day17/anon-expr-5dsGXvNk2bS9J18BASWxwdhLzh1oXS-result"}}, :nextjournal/blob-id "5dtCk53yjvpnrxyuf6PUX5ze5DtzUY"}, :nextjournal/render-opts {:id "solutions.2024.day17/anon-expr-5dsGXvNk2bS9J18BASWxwdhLzh1oXS-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5du2bNGeZLKKj88m1MhT1fDRdD6WU3"} ["h1" {:id "solution"} [:<> "Solution"]] [:p [:<> "Waited 17 days for this one!"]] [:p [:<> "Ah, the inevitable \"parse this program\" problem. I LOVE this type,"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "and I have been wading through the terrible grid problems just for"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "it."]] [:p [:<> "Today's problem has us understand and parse a 3-bit instruction"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "set (0-7) for part 1, and part two uses that logic to try and find"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "a quine (a program that outputs its own input)."]] [:p [:<> "First things first, let's load our input and parse it. We simply"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "just parse the two groups into two lists of numbers here."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5du2bNGeZLKKj88m1MhT1fDRdD6WU3"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn parse-input [input]\n  (map #(mapv parse-long (re-seq #\"\\d+\" %)) (str/split input #\"\\n\\n\")))", :nextjournal/render-opts {:loc {:line 28, :end-line 29, :column 1, :end-column 72}, :id "solutions.2024.day17/parse-input-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dsdmvhYajp4fNCaHY12twsf8nAvve"} [:p [:<> "and apply it to our input"]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dsdmvhYajp4fNCaHY12twsf8nAvve"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def input (->> (slurp (io/resource \"inputs/2024/day17.txt\")) ;; Load the resource\n                parse-input))                                 ;; Parse into lists", :nextjournal/render-opts {:loc {:line 33, :end-line 34, :column 1, :end-column 30}, :id "solutions.2024.day17/input-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value [{:path [1 0], :nextjournal/value [{:path [1 0 0], :nextjournal/value 22817223, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 0 1], :nextjournal/value 0, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 0 2], :nextjournal/value 0, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/vector-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "[", :closing-paren ("]"), :page-size 20, :hash "5dsD1KJESfc8Dy8gPeGQfZCX2ayE8f"}} {:path [1 1], :nextjournal/value [{:path [1 1 0], :nextjournal/value 2, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 1], :nextjournal/value 4, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 2], :nextjournal/value 1, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 3], :nextjournal/value 2, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 4], :nextjournal/value 7, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 5], :nextjournal/value 5, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 6], :nextjournal/value 4, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 7], :nextjournal/value 5, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 8], :nextjournal/value 0, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 9], :nextjournal/value 3, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 10], :nextjournal/value 1, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 11], :nextjournal/value 7, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 12], :nextjournal/value 5, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 13], :nextjournal/value 5, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 14], :nextjournal/value 3, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [1 1 15], :nextjournal/value 0, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/vector-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "[", :closing-paren ("]" ")"), :page-size 20, :hash "5dsD1KJESfc8Dy8gPeGQfZCX2ayE8f"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/sequential-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "(", :page-size 20, :hash "5dsgY1QgV2KqnvvrRRC3HXgCeF3Qge"}, :nextjournal/render-opts {:id "solutions.2024.day17/input-result-1"}}, :nextjournal/blob-id "5dtZQKf7rCPZa3mDL3XhLjKLZL1P5V"}, :nextjournal/render-opts {:id "solutions.2024.day17/input-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dsk6RtFknFhbJq1cVC9MZpQqf22Af"} ["h2" {:id "functions"} [:<> "Functions"]] ["h3" {:id "combo-operand"} [:<> "combo-operand"]] [:p [:<> "Compute our \"combo-operand\" that's used for some of the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "instructions, for simplicity and speed we just use a hash lookup."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dsk6RtFknFhbJq1cVC9MZpQqf22Af"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn combo-operand\n  [[a b c] operand]\n  ({0 0\n    1 1\n    2 2\n    3 3\n    4 a\n    5 b\n    6 c}\n   operand))", :nextjournal/render-opts {:loc {:line 42, :end-line 51, :column 1, :end-column 13}, :id "solutions.2024.day17/combo-operand-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dti4KNf8AhMQki3LbpGWhuxBgLGhb"} ["h3" {:id "adv"} [:<> "adv"]] [:p [:<> "\"a division\""]] [:p [:<> "Perform "] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value "\\frac{A}{2^{combo}}", :nextjournal/viewer {:name :nextjournal.markdown/formula, :render-fn #viewer-fn (fn [tex] (nextjournal.clerk.render/render-katex tex {:inline? true})), :hash "5dtTBivp9Yiw7XSqxv1opZHNencsu6"}}] [:<> " which we then cast to a "] [:code [:<> "long"]] [:<> " for"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "part 2 and store in "] [:code [:<> "A"]] [:<> "."]] [:p [:<> "Increment Instruction Pointer by 2 as normal."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dti4KNf8AhMQki3LbpGWhuxBgLGhb"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn adv [ip [a b c] operand]\n  [(+ ip 2)\n   [(long (quot a (Math/pow 2 (combo-operand [a b c] operand)))) b c]\n   []])", :nextjournal/render-opts {:loc {:line 61, :end-line 64, :column 1, :end-column 8}, :id "solutions.2024.day17/adv-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dt1uszwbdLSqWMzQikK28hCAbmH4w"} ["h3" {:id "bxl"} [:<> "bxl"]] [:p [:<> "\"b xor literal\""]] [:p [:<> "Perform a bitwise-xor of "] [:code [:<> "B"]] [:<> " and the literal operand and store in"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:code [:<> "B"]] [:<> "."]] [:p [:<> "Increment Instruction Pointer by 2 as normal."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dt1uszwbdLSqWMzQikK28hCAbmH4w"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn bxl [ip [a b c] operand]\n  [(+ ip 2)\n   [a (long (bit-xor (long b) (long operand))) c]\n   []])", :nextjournal/render-opts {:loc {:line 74, :end-line 77, :column 1, :end-column 8}, :id "solutions.2024.day17/bxl-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dr7tWvAQ1Mhz6mAHxQDgdXAYGM7E8"} ["h3" {:id "bst"} [:<> "bst"]] [:p [:<> "\"b shift twice\""]] [:p [:<> "Perform "] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value "literal \\mod 8", :nextjournal/viewer {:name :nextjournal.markdown/formula, :render-fn #viewer-fn (fn [tex] (nextjournal.clerk.render/render-katex tex {:inline? true})), :hash "5dtTBivp9Yiw7XSqxv1opZHNencsu6"}}] [:<> " and store in "] [:code [:<> "B"]] [:<> "."]] [:p [:<> "Increment Instruction Pointer by 2 as normal."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dr7tWvAQ1Mhz6mAHxQDgdXAYGM7E8"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn bst [ip [a b c] operand]\n  [(+ ip 2)\n   [a (long (mod (combo-operand [a b c] operand) 8)) c]\n   []])", :nextjournal/render-opts {:loc {:line 86, :end-line 89, :column 1, :end-column 8}, :id "solutions.2024.day17/bst-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dqoPJsVxeB5aUEKQZBaN38yGMhDbH"} ["h3" {:id "jnz"} [:<> "jnz"]] [:p [:<> "\"jump if not zero\""]] [:p [:<> "Set the Instruction Pointer to to the literal operand if "] [:code [:<> "A"]] [:<> " is not"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "zero, otherwise do nothing."]] [:p [:<> "Increment Instruction Pointer by 2 as normal if we don't jump."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dqoPJsVxeB5aUEKQZBaN38yGMhDbH"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn jnz [ip [a b c] operand]\n  [(if (zero? a) (+ ip 2) operand)\n   [a b c]\n   []])", :nextjournal/render-opts {:loc {:line 99, :end-line 102, :column 1, :end-column 8}, :id "solutions.2024.day17/jnz-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dtThu8x7BNobTWqjmCgbpNCR5xj4M"} ["h3" {:id "bxc"} [:<> "bxc"]] [:p [:<> "\"b xor c\""]] [:p [:<> "Perform a bitwise-xor of "] [:code [:<> "B"]] [:<> " and "] [:code [:<> "C"]] [:<> " and store in "] [:code [:<> "B"]] [:<> "."]] [:p [:<> "Increment Instruction Pointer by 2 as normal if we don't jump."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dtThu8x7BNobTWqjmCgbpNCR5xj4M"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn bxc [ip [a b c] _operand]\n  [(+ ip 2)\n   [a (long (bit-xor (long b) (long c))) c]\n   []])", :nextjournal/render-opts {:loc {:line 111, :end-line 114, :column 1, :end-column 8}, :id "solutions.2024.day17/bxc-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5duJjKMuYFv2pfEaFTf4rhKxped55m"} ["h3" {:id "out"} [:<> "out"]] [:p [:<> "\"output\""]] [:p [:<> "Add the result of "] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value "combo \\mod 8", :nextjournal/viewer {:name :nextjournal.markdown/formula, :render-fn #viewer-fn (fn [tex] (nextjournal.clerk.render/render-katex tex {:inline? true})), :hash "5dtTBivp9Yiw7XSqxv1opZHNencsu6"}}] [:<> " to the list of outputs."]] [:p [:<> "Increment Instruction Pointer by 2 as normal if we don't jump."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5duJjKMuYFv2pfEaFTf4rhKxped55m"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn out [ip [a b c] operand]\n  [(+ ip 2)\n   [a b c]\n   [(mod (combo-operand [a b c] operand) 8)]])", :nextjournal/render-opts {:loc {:line 123, :end-line 126, :column 1, :end-column 47}, :id "solutions.2024.day17/out-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dsYNdFaBkhXHiWvo9Pgy1xXfrKkTk"} ["h3" {:id "bdv"} [:<> "bdv"]] [:p [:<> "\"b division\""]] [:p [:<> "Apply the result of "] [:code [:<> "adv"]] [:<> " to the "] [:code [:<> "B"]] [:<> " register instead."]] [:p [:<> "Increment Instruction Pointer by 2 as normal if we don't jump."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dsYNdFaBkhXHiWvo9Pgy1xXfrKkTk"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn bdv [ip [a b c] operand]\n  [(+ ip 2)\n   [a (->> (adv ip [a b c] operand) second first) c]\n   []])", :nextjournal/render-opts {:loc {:line 135, :end-line 138, :column 1, :end-column 8}, :id "solutions.2024.day17/bdv-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5druYzbsMH3yFFvY76wAmAfGTSzpV8"} ["h3" {:id "cdv"} [:<> "cdv"]] [:p [:<> "\"c division\""]] [:p [:<> "Apply the result of "] [:code [:<> "adv"]] [:<> " to the "] [:code [:<> "C"]] [:<> " register instead."]] [:p [:<> "Increment Instruction Pointer by 2 as normal if we don't jump."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5druYzbsMH3yFFvY76wAmAfGTSzpV8"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn cdv [ip [a b c] operand]\n  [(+ ip 2)\n   [a b (->> (adv ip [a b c] operand) second first)]\n   []])", :nextjournal/render-opts {:loc {:line 147, :end-line 150, :column 1, :end-column 8}, :id "solutions.2024.day17/cdv-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dsdpAjGgJAF534AnDHhHL4HRntTDH"} ["h3" {:id "run-instructions"} [:<> "run-instructions"]] [:p [:<> "Given the initial register state and our instructions, process"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "until the IP hits the end. When we do, return the outs."]] [:p [:<> "Otherwise, recur and process instructions accordingly based on"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "their opcode; ensuring that we handle "] [:code [:<> "long"]] [:<> "s where needed."]] [:p [:<> "Since we always increase the IP by an even number (assuming the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "input is valid) we don't have to check for "] [:code [:<> "(inc ip)"]] [:<> " existing."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dsdpAjGgJAF534AnDHhHL4HRntTDH"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn run-instructions\n  [[registers program]]\n  (loop [ip 0\n         registers registers\n         outs []]\n    (if (= ip (count program))\n      outs\n      (let [[opcode operand] (map #(long (nth program %)) [ip (inc ip)])\n            [new-ip registers new-out]\n            (condp = opcode\n              0 (adv ip registers operand)\n              1 (bxl ip registers operand)\n              2 (bst ip registers operand)\n              3 (jnz ip registers operand)\n              4 (bxc ip registers operand)\n              5 (out ip registers operand)\n              6 (bdv ip registers operand)\n              7 (cdv ip registers operand))]\n        (recur\n         new-ip\n         registers\n         (into outs new-out))))))", :nextjournal/render-opts {:loc {:line 162, :end-line 183, :column 1, :end-column 34}, :id "solutions.2024.day17/run-instructions-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dr7Yzt3YTE3tj83GUNdaAFmnu84Nu"} ["h3" {:id "dfs"} [:<> "dfs"]] [:p [:<> "Implementation of a depth-first search given the fact that, given"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "it's a 3-bit set, if we keep shifting "] [:code [:<> "A"]] [:<> " by 3 we will find correct"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "values faster."]] [:p [:<> "For each bit from 0-7 ("] [:code [:<> "range"]] [:<> " is exclusive), try a new "] [:code [:<> "A"]] [:<> " by"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "left-shifting by 3 and checking the rest of the program from the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "current bit."]] [:p [:<> "We then check 3 conditions:"]] [:ul [:li [:p [:<> "If the suffix matches, we've found a candidate for "] [:code [:<> "A"]] [:<> ". Since we"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "might not yet have found the smallest "] [:code [:<> "A"]] [:<> ", we "] [:code [:<> "mapcat"]] [:<> " over them"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "to get the full list."]]] [:li [:p [:<> "If the suffix matches a prefix (everything before the current"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "bit) then we need to continue the search at another depth as"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "we're close."]]] [:li [:p [:<> "Else we found nothing, so return an empty array"]]]] [:p [:<> "Our base case ensures we don't over-search and "] [:code [:<> "mapcat"]] [:<> " removes the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "empty results so we're left with all the valid "] [:code [:<> "A"]] [:<> " candidates."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dr7Yzt3YTE3tj83GUNdaAFmnu84Nu"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn dfs\n  [program curr bit]\n  (if (> bit (count program))\n    []\n    (mapcat\n     #(let [a (bit-or (bit-shift-left curr 3) %)\n            result (run-instructions [[a 0 0] program])\n            suffix (take (inc bit) (reverse result))]\n        (cond\n          (and (= (count suffix) (count program))\n               (= suffix (take (count program) (reverse program))))\n          [a]\n\n          (= suffix (take (count suffix) (reverse program)))\n          (dfs program a (inc bit))\n\n          :else\n          []))\n     (range 8))))", :nextjournal/render-opts {:loc {:line 209, :end-line 227, :column 1, :end-column 18}, :id "solutions.2024.day17/dfs-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5drqhYjj9vtiacsZM84Vb67tbjrS2o"} ["h2" {:id "part-1"} [:<> "Part 1"]] [:p [:<> "Part 1 just wants us to run the program"]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5drqhYjj9vtiacsZM84Vb67tbjrS2o"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-1\n  [input]\n  (str/join \",\" (run-instructions input)))", :nextjournal/render-opts {:loc {:line 232, :end-line 234, :column 1, :end-column 43}, :id "solutions.2024.day17/part-1-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value "4,3,7,1,5,3,0,5,4", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}, :nextjournal/render-opts {:id "solutions.2024.day17/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}}, :nextjournal/blob-id "5drDeViroXn8dAiPSeaEcX1j7EbFnx"}, :nextjournal/render-opts {:id "solutions.2024.day17/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dtbLRvdF7DksKsi1gVCGR75eqi1Gu"} ["h2" {:id "part-2"} [:<> "Part 2"]] [:p [:<> "Part 2 wants us to find the smallest "] [:code [:<> "A"]] [:<> " that produces a quine."]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dtbLRvdF7DksKsi1gVCGR75eqi1Gu"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-2\n  [[_ program]]\n  (apply min (dfs program 0 0)))", :nextjournal/render-opts {:loc {:line 244, :end-line 246, :column 1, :end-column 33}, :id "solutions.2024.day17/part-2-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day17/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2024.day17/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 190384615275535, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2024.day17/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}}, :nextjournal/blob-id "5dtxGRd9cGAbKcf1cF3TAjvS82iKiP"}, :nextjournal/render-opts {:id "solutions.2024.day17/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}