{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Problem", :emoji nil, :path "#problem", :items []} {:title "Solution", :emoji nil, :path "#solution", :items [{:title "Functions", :emoji nil, :path "#functions", :items [{:title "valid?", :emoji nil, :path "#valid?", :items []} {:title "flood-fill", :emoji nil, :path "#flood-fill", :items []} {:title "find-areas", :emoji nil, :path "#find-areas", :items []} {:title "perimeter", :emoji nil, :path "#perimeter", :items []} {:title "count-sides", :emoji nil, :path "#count-sides", :items []} {:title "solve", :emoji nil, :path "#solve", :items []}]} {:title "Part 1", :emoji nil, :path "#part-1", :items []} {:title "Part 2", :emoji nil, :path "#part-2", :items []}]}], :nextjournal/render-opts {:toc-visibility true, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility true, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns solutions.2024.day12), :file "src/solutions/2024/day12.clj", :scope solutions.2024.day12, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/elken/aoc/blob/106afa3b06743c6097ab2f3955fb21e16153cb1d/src/solutions/2024/day12.clj"} "src/solutions/2024/day12.clj" [:<> "@" [:span.tabular-nums "106afa3"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Problem", :description "The wall is fast approaching..."}, :title "Problem", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"} ["h1" {:id "problem"} [:<> "Problem"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:div {:dangerouslySetInnerHTML {:__html "<article class=\"day-desc\"><h2>--- Day 12: Garden Groups ---</h2><p>Why not search for the Chief Historian near the <a href=\"/2023/day/5\">gardener</a> and his <a href=\"/2023/day/21\">massive farm</a>? There's plenty of food, so The Historians grab something to eat while they search.</p>\n<p>You're about to settle near a complex arrangement of garden plots when some Elves ask if you can lend a hand. They'd like to set up <span title=\"I originally wanted to title this puzzle &quot;Fencepost Problem&quot;, but I was afraid someone would then try to count fenceposts by mistake and experience a fencepost problem.\">fences</span> around each region of garden plots, but they can't figure out how much fence they need to order or how much it will cost. They hand you a map (your puzzle input) of the garden plots.</p>\n<p>Each garden plot grows only a single type of plant and is indicated by a single letter on your map. When multiple garden plots are growing the same type of plant and are touching (horizontally or vertically), they form a <em>region</em>. For example:</p>\n<pre><code>AAAA\nBBCD\nBBCC\nEEEC\n</code></pre>\n<p>This 4x4 arrangement includes garden plots growing five different types of plants (labeled <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, and <code>E</code>), each grouped into their own region.</p>\n<p>In order to accurately calculate the cost of the fence around a single region, you need to know that region's <em>area</em> and <em>perimeter</em>.</p>\n<p>The <em>area</em> of a region is simply the number of garden plots the region contains. The above map's type <code>A</code>, <code>B</code>, and <code>C</code> plants are each in a region of area <code>4</code>. The type <code>E</code> plants are in a region of area <code>3</code>; the type <code>D</code> plants are in a region of area <code>1</code>.</p>\n<p>Each garden plot is a square and so has <em>four sides</em>. The <em>perimeter</em> of a region is the number of sides of garden plots in the region that do not touch another garden plot in the same region. The type <code>A</code> and <code>C</code> plants are each in a region with perimeter <code>10</code>. The type <code>B</code> and <code>E</code> plants are each in a region with perimeter <code>8</code>. The lone <code>D</code> plot forms its own region with perimeter <code>4</code>.</p>\n<p>Visually indicating the sides of plots in each region that contribute to the perimeter using <code>-</code> and <code>|</code>, the above map's regions' perimeters are measured as follows:</p>\n<pre><code>+-+-+-+-+\n|A A A A|\n+-+-+-+-+     +-+\n              |D|\n+-+-+   +-+   +-+\n|B B|   |C|\n+   +   + +-+\n|B B|   |C C|\n+-+-+   +-+ +\n          |C|\n+-+-+-+   +-+\n|E E E|\n+-+-+-+\n</code></pre>\n<p>Plants of the same type can appear in multiple separate regions, and regions can even appear within other regions. For example:</p>\n<pre><code>OOOOO\nOXOXO\nOOOOO\nOXOXO\nOOOOO\n</code></pre>\n<p>The above map contains <em>five</em> regions, one containing all of the <code>O</code> garden plots, and the other four each containing a single <code>X</code> plot.</p>\n<p>The four <code>X</code> regions each have area <code>1</code> and perimeter <code>4</code>. The region containing <code>21</code> type <code>O</code> plants is more complicated; in addition to its outer edge contributing a perimeter of <code>20</code>, its boundary with each <code>X</code> region contributes an additional <code>4</code> to its perimeter, for a total perimeter of <code>36</code>.</p>\n<p>Due to &quot;modern&quot; business practices, the <em>price</em> of fence required for a region is found by <em>multiplying</em> that region's area by its perimeter. The <em>total price</em> of fencing all regions on a map is found by adding together the price of fence for every region on the map.</p>\n<p>In the first example, region <code>A</code> has price <code>4 * 10 = 40</code>, region <code>B</code> has price <code>4 * 8 = 32</code>, region <code>C</code> has price <code>4 * 10 = 40</code>, region <code>D</code> has price <code>1 * 4 = 4</code>, and region <code>E</code> has price <code>3 * 8 = 24</code>. So, the total price for the first example is <code><em>140</em></code>.</p>\n<p>In the second example, the region with all of the <code>O</code> plants has price <code>21 * 36 = 756</code>, and each of the four smaller <code>X</code> regions has price <code>1 * 4 = 4</code>, for a total price of <code><em>772</em></code> (<code>756 + 4 + 4 + 4 + 4</code>).</p>\n<p>Here's a larger example:</p>\n<pre><code>RRRRIICCFF\nRRRRIICCCF\nVVRRRCCFFF\nVVRCCCJFFF\nVVVVCJJCFE\nVVIVCCJJEE\nVVIIICJJEE\nMIIIIIJJEE\nMIIISIJEEE\nMMMISSJEEE\n</code></pre>\n<p>It contains:</p>\n<ul>\n<li>A region of <code>R</code> plants with price <code>12 * 18 = 216</code>.</li>\n<li>A region of <code>I</code> plants with price <code>4 * 8 = 32</code>.</li>\n<li>A region of <code>C</code> plants with price <code>14 * 28 = 392</code>.</li>\n<li>A region of <code>F</code> plants with price <code>10 * 18 = 180</code>.</li>\n<li>A region of <code>V</code> plants with price <code>13 * 20 = 260</code>.</li>\n<li>A region of <code>J</code> plants with price <code>11 * 20 = 220</code>.</li>\n<li>A region of <code>C</code> plants with price <code>1 * 4 = 4</code>.</li>\n<li>A region of <code>E</code> plants with price <code>13 * 18 = 234</code>.</li>\n<li>A region of <code>I</code> plants with price <code>14 * 22 = 308</code>.</li>\n<li>A region of <code>M</code> plants with price <code>5 * 12 = 60</code>.</li>\n<li>A region of <code>S</code> plants with price <code>3 * 8 = 24</code>.</li>\n</ul>\n<p>So, it has a total price of <code><em>1930</em></code>.</p>\n<p><em>What is the total price of fencing all regions on your map?</em></p>\n</article><article class=\"day-desc\"><h2 id=\"part2\">--- Part Two ---</h2><p>Fortunately, the Elves are trying to order so much fence that they qualify for a <em>bulk discount</em>!</p>\n<p>Under the bulk discount, instead of using the perimeter to calculate the price, you need to use the <em>number of sides</em> each region has. Each straight section of fence counts as a side, regardless of how long it is.</p>\n<p>Consider this example again:</p>\n<pre><code>AAAA\nBBCD\nBBCC\nEEEC\n</code></pre>\n<p>The region containing type <code>A</code> plants has <code>4</code> sides, as does each of the regions containing plants of type <code>B</code>, <code>D</code>, and <code>E</code>. However, the more complex region containing the plants of type <code>C</code> has <code>8</code> sides!</p>\n<p>Using the new method of calculating the per-region price by multiplying the region's area by its number of sides, regions <code>A</code> through <code>E</code> have prices <code>16</code>, <code>16</code>, <code>32</code>, <code>4</code>, and <code>12</code>, respectively, for a total price of <code><em>80</em></code>.</p>\n<p>The second example above (full of type <code>X</code> and <code>O</code> plants) would have a total price of <code><em>436</em></code>.</p>\n<p>Here's a map that includes an E-shaped region full of type <code>E</code> plants:</p>\n<pre><code>EEEEE\nEXXXX\nEEEEE\nEXXXX\nEEEEE\n</code></pre>\n<p>The E-shaped region has an area of <code>17</code> and <code>12</code> sides for a price of <code>204</code>. Including the two regions full of type <code>X</code> plants, this map has a total price of <code><em>236</em></code>.</p>\n<p>This map has a total price of <code><em>368</em></code>:</p>\n<pre><code>AAAAAA\nAAABBA\nAAABBA\nABBAAA\nABBAAA\nAAAAAA\n</code></pre>\n<p>It includes two regions full of type <code>B</code> plants (each with <code>4</code> sides) and a single region full of type <code>A</code> plants (with <code>4</code> sides on the outside and <code>8</code> more sides on the inside, a total of <code>12</code> sides). Be especially careful when counting the fence around regions like the one full of type <code>A</code> plants; in particular, each section of fence has an in-side and an out-side, so the fence does not connect across the middle of the region (where the two <code>B</code> regions touch diagonally). (The Elves would have used the MÃ¶bius Fencing Company instead, but their contract terms were too one-sided.)</p>\n<p>The larger example from before now has the following updated prices:</p>\n<ul>\n<li>A region of <code>R</code> plants with price <code>12 * 10 = 120</code>.</li>\n<li>A region of <code>I</code> plants with price <code>4 * 4 = 16</code>.</li>\n<li>A region of <code>C</code> plants with price <code>14 * 22 = 308</code>.</li>\n<li>A region of <code>F</code> plants with price <code>10 * 12 = 120</code>.</li>\n<li>A region of <code>V</code> plants with price <code>13 * 10 = 130</code>.</li>\n<li>A region of <code>J</code> plants with price <code>11 * 12 = 132</code>.</li>\n<li>A region of <code>C</code> plants with price <code>1 * 4 = 4</code>.</li>\n<li>A region of <code>E</code> plants with price <code>13 * 8 = 104</code>.</li>\n<li>A region of <code>I</code> plants with price <code>14 * 16 = 224</code>.</li>\n<li>A region of <code>M</code> plants with price <code>5 * 6 = 30</code>.</li>\n<li>A region of <code>S</code> plants with price <code>3 * 6 = 18</code>.</li>\n</ul>\n<p>Adding these together produces its new total price of <code><em>1206</em></code>.</p>\n<p><em>What is the new total price of fencing all regions on your map?</em></p>\n</article>"}}], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "solutions.2024.day12/anon-expr-5dthNf16Sduch4vhuEthFNyNEaXS14-result"}}, :nextjournal/blob-id "5drFsL5sUtEy3Fnznh3ivk8sghpUMr"}, :nextjournal/render-opts {:id "solutions.2024.day12/anon-expr-5dthNf16Sduch4vhuEthFNyNEaXS14-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dqonCd8NVBXMKnxwv4iChFRh6FxoH"} ["h1" {:id "solution"} [:<> "Solution"]] [:p [:<> "The wall is "] [:em [:<> "fast"]] [:<> " approaching..."]] [:p [:<> "Ugh, as soon as I saw another grid I groaned very loudly. Not a"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "fan, and they're slowly wearing me down. I gave up for part 2 and"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "came back to completely refactor everything I did. As with the last"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "grid problem, the explanation will be quite terse and I consider"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "this write-only code."]] [:p [:<> "Today sees us trying to calculate area and perimeter of shapes from"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "a grid, which we have to define by flood fill. Part 2 (cursed)"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "wants us to count the sides instead of perimeter."]] [:p [:<> "First things first, let's load our input and parse it"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dqonCd8NVBXMKnxwv4iChFRh6FxoH"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def input (->> (slurp (io/resource \"inputs/2024/day12.txt\")) ;; Load the resource\n                str/split-lines))                             ;; Split into lines", :nextjournal/render-opts {:loc {:line 29, :end-line 30, :column 1, :end-column 34}, :id "solutions.2024.day12/input-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value [{:path [1 0], :nextjournal/value ["ZZZZPPDDDDDDDDDDDGPPPPPPPPPPZZZZZZXXXXXXXXXXXXXQQQQYYXYUUUFBBBBBBBDDDDDDDDDDDDCC" {:nextjournal/value {:n 80, :path [1 0], :total 140, :offset 80, :replace-path [1 0 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 1], :nextjournal/value ["ZZZZPPPDDDDDDDDDDPPPPPPPPPPPPPZZXXXXXXXXXXXXXXXYQYQQYYYYUUFBBBBBBDDDDDDDDDDDDDDD" {:nextjournal/value {:n 80, :path [1 1], :total 140, :offset 80, :replace-path [1 1 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 2], :nextjournal/value ["PPPPPPDDDDDDDDDDDDPPPPPPPPPPPSZZZXXXXXXXXXXXXXYYYYYQYBYYFUFBBBBBBBDDDDDDDDDDDDDD" {:nextjournal/value {:n 80, :path [1 2], :total 140, :offset 80, :replace-path [1 2 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 3], :nextjournal/value ["PPPPPPDDDDDDDDDDDPPPPPPPPPPPZZZZOXXXXXXXXXXXYYYYYYYYYYYYFFFBBBBBBBBDDDDDDDDDDKDD" {:nextjournal/value {:n 80, :path [1 3], :total 140, :offset 80, :replace-path [1 3 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 4], :nextjournal/value ["PPPPPPDDDDDDGGGGGPPPPPPPPPPPPZZXXXXXXXXXXXXXYYYYYYYYYYYYFFFBBBBBBBBDDDDDDDDDDDOO" {:nextjournal/value {:n 80, :path [1 4], :total 140, :offset 80, :replace-path [1 4 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 5], :nextjournal/value ["PPPPPPPDDDDDGGGGGPPPGGGGGGGZZZZZXXXXXXXXYYYYPYYYYYYYYYYFFFFFFBBBBBBBDDDDDDDDDYWW" {:nextjournal/value {:n 80, :path [1 5], :total 140, :offset 80, :replace-path [1 5 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 6], :nextjournal/value ["PPPPPPPPZZZDGGGGGDPPGGGGGGGZZZZXXXXXXXXXXYFYYYYYYYYYYYYFFFFMMMMMMMMMDDDNDDDDDYYW" {:nextjournal/value {:n 80, :path [1 6], :total 140, :offset 80, :replace-path [1 6 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 7], :nextjournal/value ["PPPPPPPPQZZDGGGGGDPPGGGGGGGZZZZZXXXXXXXXXYYYYYYYYYYYYVVFFFFMMMMMMMMMDDNYYYYYDYYW" {:nextjournal/value {:n 80, :path [1 7], :total 140, :offset 80, :replace-path [1 7 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 8], :nextjournal/value ["PPPPPPZZZZZZGGGGGDPPGGGGGGGZZZZZXZXXXXXXXYYYYYYYYYYYYVVEFFVMMMMMMMMMBGGYYYYYDYWW" {:nextjournal/value {:n 80, :path [1 8], :total 140, :offset 80, :replace-path [1 8 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 9], :nextjournal/value ["PPPPPPZZZZZGGGGGGGGGGGGGGGGZZZZZZZZZJJXXXYYYYYYYYYYYYVVVYYVMMMMMMMMMBBGYYYYYYYYY" {:nextjournal/value {:n 80, :path [1 9], :total 140, :offset 80, :replace-path [1 9 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 10], :nextjournal/value ["PPPPZZZZZZZGGGGGGGGGGGGGGGGZZZZSSZZZJJYYYYYYYYYYYYYYYYVVYYVMMMMMMMMMYYYYYYYYYYWW" {:nextjournal/value {:n 80, :path [1 10], :total 140, :offset 80, :replace-path [1 10 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 11], :nextjournal/value ["PPPPZZZZZZZGGGGGGGGGGGGGGGGZZZSSSZZZXXYYYYYYYYYYYYYYYVVVVVVMMMMMMMMMYYYYYYYYCCWW" {:nextjournal/value {:n 80, :path [1 11], :total 140, :offset 80, :replace-path [1 11 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 12], :nextjournal/value ["PPPPZZZZZZZGGGGGGGGGGGGGGGGZZZXDSZRZXXYYYYYYYYYPPYYYYMMMMMMMMMMMMMMMYYYYYYYYCCWW" {:nextjournal/value {:n 80, :path [1 12], :total 140, :offset 80, :replace-path [1 12 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 13], :nextjournal/value ["PPPPZZZZZZZGGGGGGGGGGYYYYYYYZZXXIRRRXXXYYYYYYYYPPPPPPMMMMMMMMMMMMMMMYYYYYYYYWWWW" {:nextjournal/value {:n 80, :path [1 13], :total 140, :offset 80, :replace-path [1 13 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 14], :nextjournal/value ["PPPPPPPZZZZGGGGGGGGGGYYYYYMYYZXXRRXXXXXYYYYHHHPPPPPPVMMMMMMMMMMMMMMMMMMMGGCWWWWW" {:nextjournal/value {:n 80, :path [1 14], :total 140, :offset 80, :replace-path [1 14 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 15], :nextjournal/value ["PPPPPZZZZZZGGGGGGGGGGYYYYYYYYZXXXXXXXXXXYXYYYHPPPPPPMMMMMMMMMMMMMMMMMMMMGCCCCWWW" {:nextjournal/value {:n 80, :path [1 15], :total 140, :offset 80, :replace-path [1 15 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 16], :nextjournal/value ["PPPPPPZZZZZGGGGGGGGGGYYYYYYYYZZXXXXXXXXXXXYXPPPPPPPPPMMMMMMMMMMMMMMMMMMMCCCCXXXW" {:nextjournal/value {:n 80, :path [1 16], :total 140, :offset 80, :replace-path [1 16 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 17], :nextjournal/value ["PPPPPPPPIZZGGGGGGGGGGYYYYYYYYZZXXXUUXUXXXXXXPPVVVPPPPMMMMMMMMMMMMMMMMMMMXCCCXXXT" {:nextjournal/value {:n 80, :path [1 17], :total 140, :offset 80, :replace-path [1 17 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 18], :nextjournal/value ["PPPPPPPPIIIGGGGGGGGGGYYYYYYYYYZZXUUUUUXXXXXXXVVVVVPPPPPPPPPMMMMMMMMMMMMMXXXXXXTT" {:nextjournal/value {:n 80, :path [1 18], :total 140, :offset 80, :replace-path [1 18 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 19], :nextjournal/value ["PPPPPPPPPIIGGGGQYYYYYYYYYYYYYYZZXUDUUUXXXXXXVVVVVVVPPPPPPXVMMMMMMMMMMMMMXXXXXXXT" {:nextjournal/value {:n 80, :path [1 19], :total 140, :offset 80, :replace-path [1 19 80]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:nextjournal/value {:n 20, :path [1], :total 140, :offset 20}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/vector-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "[", :closing-paren ("]"), :page-size 20, :hash "5dsD1KJESfc8Dy8gPeGQfZCX2ayE8f"}, :nextjournal/render-opts {:id "solutions.2024.day12/input-result-1"}}, :nextjournal/blob-id "5dquvqvLcqfyaeJTouNtCCPkRxTedK"}, :nextjournal/render-opts {:id "solutions.2024.day12/input-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dtym2v1DtLYNa2E282tsJw9wS6TKs"} [:p [:<> "And store our valid movement directions"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dtym2v1DtLYNa2E282tsJw9wS6TKs"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def directions [[0 -1] [0 1] [-1 0] [1 0]])", :nextjournal/render-opts {:loc {:line 34, :end-line 34, :column 1, :end-column 45}, :id "solutions.2024.day12/directions-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dshGvFwXySrFRESRhDSLg9gj2mhQS"} ["h2" {:id "functions"} [:<> "Functions"]] ["h3" {:id "valid?"} [:<> "valid?"]] [:p [:<> "Check if a point is valid within the confines of the grid."]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dshGvFwXySrFRESRhDSLg9gj2mhQS"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn valid? [grid [x y]]\n  (and (>= x 0) (< x (count (first grid)))\n       (>= y 0) (< y (count grid))))", :nextjournal/render-opts {:loc {:line 40, :end-line 42, :column 1, :end-column 37}, :id "solutions.2024.day12/valid?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dtd26CfSzJmN9CWb12mb4wa6iSNQF"} ["h3" {:id "flood-fill"} [:<> "flood-fill"]] [:p [:<> "Implementation of a flood fill algorithm."]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dtd26CfSzJmN9CWb12mb4wa6iSNQF"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn flood-fill [grid [x y :as start]]\n  (let [val (get-in grid [y x])\n        next-points (fn [[cx cy]]\n                      (->> directions\n                           (map (fn [[dx dy]] [(+ cx dx) (+ cy dy)]))\n                           (filter #(and (valid? grid %)\n                                         (= val (get-in grid [(second %) (first %)]))))))]\n    (loop [seen #{start}\n           [curr & rest] [start]]\n      (if-not curr\n        seen\n        (let [neighbors (filter #(not (seen %)) (next-points curr))]\n          (recur (into seen neighbors)\n                 (concat rest neighbors)))))))", :nextjournal/render-opts {:loc {:line 47, :end-line 60, :column 1, :end-column 47}, :id "solutions.2024.day12/flood-fill-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dscCLAByxRFZoRVdxSz1d6iyR1zSy"} ["h3" {:id "find-areas"} [:<> "find-areas"]] [:p [:<> "Find all the areas in our grid. We can't just do a group-by to find"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "this quickly because there can be multiple letters having"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "regions (imagine if it wasn't...)"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dscCLAByxRFZoRVdxSz1d6iyR1zSy"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn find-areas [grid]\n  (let [positions (for [y (range (count grid))\n                        x (range (count (first grid)))]\n                    [x y])]\n    (->> positions\n         (reduce\n          (fn [{:keys [areas seen]} pos]\n            (if (seen pos)\n              {:areas areas :seen seen}\n              (let [area (flood-fill grid pos)]\n                {:areas (conj areas area)\n                 :seen (into seen area)})))\n          {:areas [] :seen #{}})\n         :areas)))", :nextjournal/render-opts {:loc {:line 67, :end-line 80, :column 1, :end-column 19}, :id "solutions.2024.day12/find-areas-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5driSeUyZ7hCWAnnrWEuWXi12Z3iSt"} ["h3" {:id "perimeter"} [:<> "perimeter"]] [:p [:<> "For a given area in the grid, calculate the perimeter. For each"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "point in the area, look at its four adjacent positions then count"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "how many of those positions are either outside the grid or have a"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "different value. Sum up all these \"missing neighbor\" counts to get"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "the perimeter"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5driSeUyZ7hCWAnnrWEuWXi12Z3iSt"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn perimeter [grid area]\n  (let [val (get-in grid [(second (first area)) (first (first area))])\n        valid-point? (fn [[x y]]\n                       (and (valid? grid [x y])\n                            (= val (get-in grid [y x]))))\n        missing-neighbors (fn [pos]\n                            (->> directions\n                                 (map #(mapv + pos %))\n                                 (remove valid-point?)\n                                 count))]\n    (->> area\n         (map missing-neighbors)\n         (reduce +))))", :nextjournal/render-opts {:loc {:line 89, :end-line 101, :column 1, :end-column 23}, :id "solutions.2024.day12/perimeter-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5ds7zGvbx73B7v8tMRJWTdKGsQcanu"} ["h3" {:id "count-sides"} [:<> "count-sides"]] [:p [:<> "The dreaded part 2. The saving grace that got me to finish this was"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "the sheer amount of people who haven't. The trick here is looking"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "for points that are left sides, in that there isn't a point to the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "left and either no point below or a point at the diagonal. We then"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "count all these left edges in the current orientation, then we"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "rotate about both axis and apply the same logic there. Adding all"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "these counts gives us our total."]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5ds7zGvbx73B7v8tMRJWTdKGsQcanu"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn count-sides [area]\n  (let [area-set (set area)\n        make-transform (fn [f] (set (map f area-set)))\n        transforms [(make-transform identity)\n                    (make-transform (fn [[x y]] [(- x) y]))\n                    (make-transform (fn [[x y]] [y x]))\n                    (make-transform (fn [[x y]] [(- y) x]))]\n        left-sides (fn [points]\n                     (count\n                      (filter (fn [[x y]]\n                                (and (not (points [(dec x) y]))\n                                     (or (not (points [x (dec y)]))\n                                         (points [(dec x) (dec y)]))))\n                              points)))]\n    (->> transforms\n         (map left-sides)\n         (reduce +))))", :nextjournal/render-opts {:loc {:line 112, :end-line 128, :column 1, :end-column 23}, :id "solutions.2024.day12/count-sides-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dr6WM42WbHDczE8Wyb1qxyKysMRzY"} ["h3" {:id "solve"} [:<> "solve"]] [:p [:<> "Our general solver since both parts do the same thing.  Map out the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "areas, apply our "] [:code [:<> "f"]] [:<> " from either part then add them up."]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dr6WM42WbHDczE8Wyb1qxyKysMRzY"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn solve [grid f]\n  (->> (find-areas grid)\n       (map #(* (count %) (f grid %)))\n       (reduce +)))", :nextjournal/render-opts {:loc {:line 134, :end-line 137, :column 1, :end-column 20}, :id "solutions.2024.day12/solve-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dqpFYZ6M7CEJLcXao7ALaECfeCzXB"} ["h2" {:id "part-1"} [:<> "Part 1"]] [:p [:<> "Part 1 wants perimeter"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dqpFYZ6M7CEJLcXao7ALaECfeCzXB"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-1\n  [input]\n  (solve input perimeter))", :nextjournal/render-opts {:loc {:line 142, :end-line 144, :column 1, :end-column 27}, :id "solutions.2024.day12/part-1-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 1471452, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2024.day12/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}}, :nextjournal/blob-id "5dtquULoxiypnk9CMs2DrhQEMy1fxe"}, :nextjournal/render-opts {:id "solutions.2024.day12/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5drpmuBz7UB2awMTUWGZW18ashZVD7"} ["h2" {:id "part-2"} [:<> "Part 2"]] [:p [:<> "Part 2 wants us to count the sides"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5drpmuBz7UB2awMTUWGZW18ashZVD7"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-2\n  [input]\n  (solve input #(->> %2 count-sides)))", :nextjournal/render-opts {:loc {:line 154, :end-line 156, :column 1, :end-column 39}, :id "solutions.2024.day12/part-2-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2024.day12/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2024.day12/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 863366, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2024.day12/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}}, :nextjournal/blob-id "5dsEeuCRcm4djsgyJUVsKKcfEiyQbm"}, :nextjournal/render-opts {:id "solutions.2024.day12/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}