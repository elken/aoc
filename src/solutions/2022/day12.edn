{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Problem", :emoji nil, :path "#problem", :items [{:title "Solution", :emoji nil, :path "#solution", :items []} {:title "Convert elevation to height", :emoji nil, :path "#convert-elevation-to-height", :items []} {:title "Convert a range to co-ordinates", :emoji nil, :path "#convert-a-range-to-co-ordinates", :items []} {:title "Find shortest path", :emoji nil, :path "#find-shortest-path", :items []} {:title "Find all characters", :emoji nil, :path "#find-all-characters", :items []} {:title "Part 1", :emoji nil, :path "#part-1", :items []} {:title "Part 2", :emoji nil, :path "#part-2", :items []}]}], :nextjournal/render-opts {:toc-visibility true, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility true, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns solutions.2022.day12), :file "src/solutions/2022/day12.clj", :scope solutions.2022.day12, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/elken/aoc/blob/7538358ecfe2cbc6abb5b0888f5312c6d574527e/src/solutions/2022/day12.clj"} "src/solutions/2022/day12.clj" [:<> "@" [:span.tabular-nums "7538358"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Problem", :description "I was dreading this day, not a fan of these. But there's always a Dijsktra day..."}, :title "Problem", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"} ["h1" {:id "problem"} [:<> "Problem"]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:div {:dangerouslySetInnerHTML {:__html "<article class=\"day-desc\"><h2>--- Day 12: Hill Climbing Algorithm ---</h2><p>You try contacting the Elves using your <span title=\"When you look up the specs for your handheld device, every field just says &quot;plot&quot;.\">handheld device</span>, but the river you're following must be too low to get a decent signal.</p>\n<p>You ask the device for a heightmap of the surrounding area (your puzzle input). The heightmap shows the local area from above broken into a grid; the elevation of each square of the grid is given by a single lowercase letter, where <code>a</code> is the lowest elevation, <code>b</code> is the next-lowest, and so on up to the highest elevation, <code>z</code>.</p>\n<p>Also included on the heightmap are marks for your current position (<code>S</code>) and the location that should get the best signal (<code>E</code>). Your current position (<code>S</code>) has elevation <code>a</code>, and the location that should get the best signal (<code>E</code>) has elevation <code>z</code>.</p>\n<p>You'd like to reach <code>E</code>, but to save energy, you should do it in <em>as few steps as possible</em>. During each step, you can move exactly one square up, down, left, or right. To avoid needing to get out your climbing gear, the elevation of the destination square can be <em>at most one higher</em> than the elevation of your current square; that is, if your current elevation is <code>m</code>, you could step to elevation <code>n</code>, but not to elevation <code>o</code>. (This also means that the elevation of the destination square can be much lower than the elevation of your current square.)</p>\n<p>For example:</p>\n<pre><code><em>S</em>abqponm\nabcryxxl\naccsz<em>E</em>xk\nacctuvwj\nabdefghi\n</code></pre>\n<p>Here, you start in the top-left corner; your goal is near the middle. You could start by moving down or right, but eventually you'll need to head toward the <code>e</code> at the bottom. From there, you can spiral around to the goal:</p>\n<pre><code>v..v&lt;&lt;&lt;&lt;\n&gt;v.vv&lt;&lt;^\n.&gt;vv&gt;E^^\n..v&gt;&gt;&gt;^^\n..&gt;&gt;&gt;&gt;&gt;^\n</code></pre>\n<p>In the above diagram, the symbols indicate whether the path exits each square moving up (<code>^</code>), down (<code>v</code>), left (<code>&lt;</code>), or right (<code>&gt;</code>). The location that should get the best signal is still <code>E</code>, and <code>.</code> marks unvisited squares.</p>\n<p>This path reaches the goal in <code><em>31</em></code> steps, the fewest possible.</p>\n<p><em>What is the fewest steps required to move from your current position to the location that should get the best signal?</em></p>\n</article><article class=\"day-desc\"><h2 id=\"part2\">--- Part Two ---</h2><p>As you walk up the hill, you suspect that the Elves will want to turn this into a hiking trail. The beginning isn't very scenic, though; perhaps you can find a better starting point.</p>\n<p>To maximize exercise while hiking, the trail should start as low as possible: elevation <code>a</code>. The goal is still the square marked <code>E</code>. However, the trail should still be direct, taking the fewest steps to reach its goal. So, you'll need to find the shortest path from <em>any square at elevation <code>a</code></em> to the square marked <code>E</code>.</p>\n<p>Again consider the example from above:</p>\n<pre><code><em>S</em>abqponm\nabcryxxl\naccsz<em>E</em>xk\nacctuvwj\nabdefghi\n</code></pre>\n<p>Now, there are six choices for starting position (five marked <code>a</code>, plus the square marked <code>S</code> that counts as being at elevation <code>a</code>). If you start at the bottom-left square, you can reach the goal most quickly:</p>\n<pre><code>...v&lt;&lt;&lt;&lt;\n...vv&lt;&lt;^\n...v&gt;E^^\n.&gt;v&gt;&gt;&gt;^^\n&gt;^&gt;&gt;&gt;&gt;&gt;^\n</code></pre>\n<p>This path reaches the goal in only <code><em>29</em></code> steps, the fewest possible.</p>\n<p><em>What is the fewest steps required to move starting from any square with elevation <code>a</code> to the location that should get the best signal?</em></p>\n</article>"}}], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "solutions.2022.day12/anon-expr-5dsEfZT8kTkDA6r1dP3EyHVRqVKzWp-result"}}, :nextjournal/blob-id "5dtKyfTenRTEdM84sWNruo26Yepw2U"}, :nextjournal/render-opts {:id "solutions.2022.day12/anon-expr-5dsEfZT8kTkDA6r1dP3EyHVRqVKzWp-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5dtgAV8kLTVhC9RrF74xKurYsBiVXP"} ["h2" {:id "solution"} [:<> "Solution"]] [:p [:<> "I was dreading this day, not a fan of these. But there's always a Dijsktra day..."]] [:p [:<> "Today's problem is a case of finding the shortest path from one or many"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "node(s) to another given node. Both parts differ slightly and I was able to"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "luck out and guess part 2, meaning no refactor!"]] [:p [:<> "Not much more to say about it, we just compute the shortest path from start"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "to end by adding up all the valid neighbours and finding the shortest route."]] [:p [:<> "Ended up borrowing a lot of code from "] [:a {:href "https://elken.github.io/aoc/src/solutions/2022/day08.html"} [:<> "Day 8"]] [:<> " which helped."]] ["h2" {:id "convert-elevation-to-height"} [:<> "Convert elevation to height"]] [:p [:<> "First we need a function to convert a character to a \"height\" value, which"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "mostly boils down to the char code; with the "] [:code [:<> "S"]] [:<> "tart and "] [:code [:<> "E"]] [:<> "nd values being"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:code [:<> "0"]] [:<> " and "] [:code [:<> "25"]] [:<> " respectively."]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5dtgAV8kLTVhC9RrF74xKurYsBiVXP"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn elevation->height [elevation]\n  (condp = elevation\n    \\S 0\n    \\E 25\n    (- (int elevation) (int \\a))))", :nextjournal/render-opts {:loc {:line 31, :end-line 35, :column 1, :end-column 35}, :id "solutions.2022.day12/elevation->height-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5duKG2TryDguURyCFdZ2dj9pHsAwHf"} ["h2" {:id "convert-a-range-to-co-ordinates"} [:<> "Convert a range to co-ordinates"]] [:p [:<> "Similar to "] [:a {:href "https://elken.github.io/aoc/src/solutions/2022/day08.html"} [:<> "Day 8"]] [:<> ", we parse the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "list of values into a map that looks like"]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5duKG2TryDguURyCFdZ2dj9pHsAwHf"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [{:path [0 0], :nextjournal/value [{:path [0 0 0], :nextjournal/value [{:path [0 0 0 0], :nextjournal/value 0, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}} {:path [0 0 0 1], :nextjournal/value 0, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/vector-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "[", :closing-paren ("]"), :page-size 20, :hash "5dsD1KJESfc8Dy8gPeGQfZCX2ayE8f"}} {:path [0 0 1], :nextjournal/value [{:path [0 0 1 0], :nextjournal/value [{:path [0 0 1 0 0], :nextjournal/value :char, :nextjournal/viewer {:name nextjournal.clerk.viewer/keyword-viewer, :render-fn #viewer-fn (fn [x] [:span.cmt-atom.inspected-value (str x)]), :hash "5dsp5Uy2KDqwuALVVk33HXMZdpXGBq"}} {:path [0 0 1 0 1], :nextjournal/value \S, :nextjournal/viewer {:name nextjournal.clerk.viewer/char-viewer, :render-fn #viewer-fn (fn [c] [:span.cmt-string.inspected-value "\\" c]), :hash "5dsrwEui5XWfykYe6nKV94coAm8X5X"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/map-entry-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (comp (nextjournal.clerk.render/inspect-children opts) (interpose " ")) xs)), :page-size 2, :hash "5dsRuzZximgoCTqHkts5WgKf7zc8xg"}} {:path [0 0 1 1], :nextjournal/value [{:path [0 0 1 1 0], :nextjournal/value :elevation, :nextjournal/viewer {:name nextjournal.clerk.viewer/keyword-viewer, :render-fn #viewer-fn (fn [x] [:span.cmt-atom.inspected-value (str x)]), :hash "5dsp5Uy2KDqwuALVVk33HXMZdpXGBq"}} {:path [0 0 1 1 1], :nextjournal/value 0, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/map-entry-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (comp (nextjournal.clerk.render/inspect-children opts) (interpose " ")) xs)), :page-size 2, :hash "5dsRuzZximgoCTqHkts5WgKf7zc8xg"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/map-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-map, :opening-paren "{", :closing-paren ("}" "}"), :page-size 10, :hash "5drc3ac5ux7kS4h2vozdxwsrKDqSmn"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/map-entry-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (comp (nextjournal.clerk.render/inspect-children opts) (interpose " ")) xs)), :page-size 2, :hash "5dsRuzZximgoCTqHkts5WgKf7zc8xg"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/map-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-map, :opening-paren "{", :page-size 10, :hash "5drc3ac5ux7kS4h2vozdxwsrKDqSmn"}, :nextjournal/render-opts {:id "solutions.2022.day12/anon-expr-5dtzF7Dd2boqrXRmPmu7SNEFiLhNxm-result"}}, :nextjournal/blob-id "5dtEJgmmYPaVaq54UBAKZefPjv1sES"}, :nextjournal/render-opts {:id "solutions.2022.day12/anon-expr-5dtzF7Dd2boqrXRmPmu7SNEFiLhNxm-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn range->coords\n  [matrix]\n  (into {}\n        (for [x (range (count matrix))\n              y (range (count (first matrix)))\n              :let [c (get (get matrix x) y)\n                    e (elevation->height c)]]\n          [[x y] {:elevation e\n                  :char c}])))", :nextjournal/render-opts {:loc {:line 45, :end-line 53, :column 1, :end-column 31}, :id "solutions.2022.day12/range->coords-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5duEPPreDS77YdExUSimBQPsoQNX7n"} [:p [:<> "Now we can parse out input"]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5duEPPreDS77YdExUSimBQPsoQNX7n"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def input (->> (slurp (io/resource \"inputs/2022/day12.txt\")) ;; Load the resource\n                str/split-lines                               ;; Split into lines\n                range->coords))                               ;; Parse to matrix", :nextjournal/render-opts {:loc {:line 56, :end-line 58, :column 1, :end-column 32}, :id "solutions.2022.day12/input-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5dsVjUz56Gc38HYVsS83uLwuh27kcF"} ["h2" {:id "find-shortest-path"} [:<> "Find shortest path"]] [:p [:<> "The main \"computation\" function that uses a "] [:a {:href "https://github.com/danielmiladinov/joy-of-clojure/blob/master/src/joy-of-clojure/chapter5/how_to_use_persistent_queues.clj"} [:<> "PersistentQueue"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "that I was lucky enough to have a physical copy of the associated book in front of me."]] [:p [:<> "The basic iteration for each loop looks like:"]] [:ul [:li [:<> [:<> "Get the first node in the list of nodes to check"]]] [:li [:<> [:<> "Return the "] [:code [:<> "seen"]] [:<> " value if it's the last node"]]] [:li [:<> [:<> "Otherwise get all the neighbours by checking the cardinal directions for"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "unseen, unvisited nodes we can move to"]]] [:li [:<> [:<> "Recur with these valid neighbours applied and update the "] [:code [:<> "seen"]] [:<> " values"]]]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5dsVjUz56Gc38HYVsS83uLwuh27kcF"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn find-shortest-path [input from to]\n  (loop [unvisited (reduce conj clojure.lang.PersistentQueue/EMPTY from)\n         seen (zipmap from (repeat 0))]\n    (let [node (peek unvisited)]\n      (if (= to node)\n        (seen node)\n        (let [neighbours (->> neighbour\n                              (for [direction [[-1 0] [1 0] [0 -1] [0 1]]\n                                    :let [neighbour (mapv + node direction)]\n                                    :when (and (input neighbour)\n                                               (not (seen neighbour))\n                                               (not (.contains neighbour unvisited))\n                                               (>=\n                                                (:elevation (input node))\n                                                (dec (:elevation (input neighbour)))))])\n                              vec)]\n          (recur (into (pop unvisited) neighbours)\n                 (merge seen (zipmap neighbours (repeat (inc (seen node)))))))))))", :nextjournal/render-opts {:loc {:line 70, :end-line 87, :column 1, :end-column 83}, :id "solutions.2022.day12/find-shortest-path-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5duGAaM7DrFZ9t3YJy6DoKBvgLRVL1"} ["h2" {:id "find-all-characters"} [:<> "Find all characters"]] [:p [:<> "Lastly we need a small helper method to give us the locations of all"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "instances of a given set of characters"]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5duGAaM7DrFZ9t3YJy6DoKBvgLRVL1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn find-chars [input & chars]\n  (keys\n   (first ((juxt filter remove)\n           (fn [[_ v]] (.contains chars (:char v))) input))))", :nextjournal/render-opts {:loc {:line 92, :end-line 95, :column 1, :end-column 62}, :id "solutions.2022.day12/find-chars-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5dtkBQr5hDxd86xUDUbjd81WFsXc8F"} ["h2" {:id "part-1"} [:<> "Part 1"]] [:p [:<> "Part 1 is just a simple case of finding the path from "] [:code [:<> "S"]] [:<> " to "] [:code [:<> "E"]]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5dtkBQr5hDxd86xUDUbjd81WFsXc8F"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-1\n  [input]\n  (find-shortest-path\n   input\n   (find-chars input \\S)\n   (first (find-chars input \\E))))", :nextjournal/render-opts {:loc {:line 100, :end-line 105, :column 1, :end-column 35}, :id "solutions.2022.day12/part-1-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 383, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2022.day12/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}}, :nextjournal/blob-id "5driStfYBB5ipzHnetA7doM76gQFjc"}, :nextjournal/render-opts {:id "solutions.2022.day12/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5dqwVnFrrJcGBNX7EQKpEwBU9KYyoB"} ["h2" {:id "part-2"} [:<> "Part 2"]] [:p [:<> "Part 2 is a little bit more involved, now we have to also consider all "] [:code [:<> "a"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "paths as well as "] [:code [:<> "S"]] [:<> ", but as above we lucked out and got this part for free."]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5dqwVnFrrJcGBNX7EQKpEwBU9KYyoB"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-2\n  [input]\n  (find-shortest-path\n   input\n   (find-chars input \\a \\S)\n   (first (find-chars input \\E))))", :nextjournal/render-opts {:loc {:line 115, :end-line 120, :column 1, :end-column 35}, :id "solutions.2022.day12/part-2-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2022.day12/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2022.day12/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 377, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2022.day12/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}}, :nextjournal/blob-id "5dqtcPg68EXPXwHauM4wjhPLQ3hdLS"}, :nextjournal/render-opts {:id "solutions.2022.day12/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}