{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Problem", :emoji nil, :path "#problem", :items []} {:title "Solution", :emoji nil, :path "#solution", :items [{:title "Get a value or return", :emoji nil, :path "#get-a-value-or-return", :items []} {:title "Parse all the instructions", :emoji nil, :path "#parse-all-the-instructions", :items []} {:title "Swap signal values", :emoji nil, :path "#swap-signal-values", :items []} {:title "Part 1", :emoji nil, :path "#part-1", :items []} {:title "Part 2", :emoji nil, :path "#part-2", :items []}]}], :nextjournal/render-opts {:toc-visibility true, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility true, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns solutions.2015.day07), :file "src/solutions/2015/day07.clj", :scope solutions.2015.day07, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/elken/aoc/blob/1df7ea72cfc7939069e432ee8dc453db77b05792/src/solutions/2015/day07.clj"} "src/solutions/2015/day07.clj" [:<> "@" [:span.tabular-nums "1df7ea7"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Problem", :description "A strange day this one. On paper, the solution seems trivial; but getting everything exactly right took some time."}, :title "Problem", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"} ["h1" {:id "problem"} [:<> "Problem"]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:div {:dangerouslySetInnerHTML {:__html "<article class=\"day-desc\"><h2>--- Day 7: Some Assembly Required ---</h2><p>This year, Santa brought little Bobby Tables a set of wires and <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\">bitwise logic gates</a>!  Unfortunately, little Bobby is a little under the recommended age range, and he needs help <span title=\"You had one of these as a kid, right?\">assembling the circuit</span>.</p>\n<p>Each wire has an identifier (some lowercase letters) and can carry a <a href=\"https://en.wikipedia.org/wiki/16-bit\">16-bit</a> signal (a number from <code>0</code> to <code>65535</code>).  A signal is provided to each wire by a gate, another wire, or some specific value. Each wire can only get a signal from one source, but can provide its signal to multiple destinations.  A gate provides no signal until all of its inputs have a signal.</p>\n<p>The included instructions booklet describes how to connect the parts together: <code>x AND y -&gt; z</code> means to connect wires <code>x</code> and <code>y</code> to an AND gate, and then connect its output to wire <code>z</code>.</p>\n<p>For example:</p>\n<ul>\n<li><code>123 -&gt; x</code> means that the signal <code>123</code> is provided to wire <code>x</code>.</li>\n<li><code>x AND y -&gt; z</code> means that the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#AND\">bitwise AND</a> of wire <code>x</code> and wire <code>y</code> is provided to wire <code>z</code>.</li>\n<li><code>p LSHIFT 2 -&gt; q</code> means that the value from wire <code>p</code> is <a href=\"https://en.wikipedia.org/wiki/Logical_shift\">left-shifted</a> by <code>2</code> and then provided to wire <code>q</code>.</li>\n<li><code>NOT e -&gt; f</code> means that the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#NOT\">bitwise complement</a> of the value from wire <code>e</code> is provided to wire <code>f</code>.</li>\n</ul>\n<p>Other possible gates include <code>OR</code> (<a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#OR\">bitwise OR</a>) and <code>RSHIFT</code> (<a href=\"https://en.wikipedia.org/wiki/Logical_shift\">right-shift</a>).  If, for some reason, you'd like to <em>emulate</em> the circuit instead, almost all programming languages (for example, <a href=\"https://en.wikipedia.org/wiki/Bitwise_operations_in_C\">C</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">JavaScript</a>, or <a href=\"https://wiki.python.org/moin/BitwiseOperators\">Python</a>) provide operators for these gates.</p>\n<p>For example, here is a simple circuit:</p>\n<pre><code>123 -&gt; x\n456 -&gt; y\nx AND y -&gt; d\nx OR y -&gt; e\nx LSHIFT 2 -&gt; f\ny RSHIFT 2 -&gt; g\nNOT x -&gt; h\nNOT y -&gt; i\n</code></pre>\n<p>After it is run, these are the signals on the wires:</p>\n<pre><code>d: 72\ne: 507\nf: 492\ng: 114\nh: 65412\ni: 65079\nx: 123\ny: 456\n</code></pre>\n<p>In little Bobby's kit's instructions booklet (provided as your puzzle input), what signal is ultimately provided to <em>wire <code>a</code></em>?</p>\n</article><article class=\"day-desc\"><h2 id=\"part2\">--- Part Two ---</h2><p>Now, take the signal you got on wire <code>a</code>, override wire <code>b</code> to that signal, and reset the other wires (including wire <code>a</code>).  What new signal is ultimately provided to wire <code>a</code>?</p>\n</article>"}}], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "solutions.2015.day07/anon-expr-5dr5d2WWgozS3jqiLjyAa5AV3qZLyk-result"}}, :nextjournal/blob-id "5duEYTq8ZKKgm5oPxDAM7dRtNRuV1C"}, :nextjournal/render-opts {:id "solutions.2015.day07/anon-expr-5dr5d2WWgozS3jqiLjyAa5AV3qZLyk-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5druNQ1Z5AjAjycc5XYke5ZhV8xbRZ"} ["h1" {:id "solution"} [:<> "Solution"]] [:p [:<> "A strange day this one. On paper, the solution seems trivial; but getting"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "everything exactly right took some time."]] [:p [:<> "In short, the problem is a simple DSL that uses bit operations to store"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "values in registers called \"wires\", with the value called \"signals\". The"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "instruction set is very small, the full set being:"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "123 -> x             ;; Initialize \"x\" register to 123\nNOT y -> i           ;; Set \"i\" register to the result of bitwise-complement of \"y\"\nx AND y -> d         ;; Set \"d\" register to the result of bitwise-and \"x\" and \"y\" registers\nx OR y -> e          ;; Set \"e\" register to the result of bitwise-or \"x\" and \"y\" registers\nx LSHIFT 2 -> f      ;; Set \"f\" register to the result of left-shifting the \"x\" register by 2\ny RSHIFT 2 -> g      ;; Set \"g\" register to the result of right-shifting the \"y\" register by 2", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "Some of these values can be numbers or registers, so both cases have to be handled there."]] [:p [:<> "Given an input, part 1 asks you to find the result of a particular wire. Part"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "2 is an interesting twist that asks you to replace the value of another wire"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "with the result of part 1 (the first time the parts are directly linked!)"]] [:p [:<> "First things first, let's load our input and parse it"]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5druNQ1Z5AjAjycc5XYke5ZhV8xbRZ"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def input (->> (slurp (io/resource \"inputs/2015/day07.txt\")) ;; Load the resource\n                str/split-lines))                             ;; Split into lines", :nextjournal/render-opts {:loc {:line 41, :end-line 42, :column 1, :end-column 34}, :id "solutions.2015.day07/input-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value [{:path [1 0], :nextjournal/value "NOT dq -> dr", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 1], :nextjournal/value "kg OR kf -> kh", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 2], :nextjournal/value "ep OR eo -> eq", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 3], :nextjournal/value "44430 -> b", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 4], :nextjournal/value "NOT gs -> gt", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 5], :nextjournal/value "dd OR do -> dp", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 6], :nextjournal/value "eg AND ei -> ej", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 7], :nextjournal/value "y AND ae -> ag", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 8], :nextjournal/value "jx AND jz -> ka", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 9], :nextjournal/value "lf RSHIFT 2 -> lg", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 10], :nextjournal/value "z AND aa -> ac", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 11], :nextjournal/value "dy AND ej -> el", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 12], :nextjournal/value "bj OR bi -> bk", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 13], :nextjournal/value "kk RSHIFT 3 -> km", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 14], :nextjournal/value "NOT cn -> co", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 15], :nextjournal/value "gn AND gp -> gq", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 16], :nextjournal/value "cq AND cs -> ct", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 17], :nextjournal/value "eo LSHIFT 15 -> es", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 18], :nextjournal/value "lg OR lm -> ln", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 19], :nextjournal/value "dy OR ej -> ek", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:nextjournal/value {:n 20, :path [1], :total 339, :offset 20}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/vector-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "[", :closing-paren ("]"), :page-size 20, :hash "5dsD1KJESfc8Dy8gPeGQfZCX2ayE8f"}, :nextjournal/render-opts {:id "solutions.2015.day07/input-result-1"}}, :nextjournal/blob-id "5ds4yL9BXoWKk5DhhCoiD5Ghhuh8e8"}, :nextjournal/render-opts {:id "solutions.2015.day07/input-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5dtiQ7CC2hE6YZuYsou96Ywe2R57wK"} ["h2" {:id "get-a-value-or-return"} [:<> "Get a value or return"]] [:p [:<> "A very poorly named function which given a cache-retreival function and an "] [:code [:<> "n"]] [:<> ", attempt the following:"]] [:ul [:li [:<> [:<> "If "] [:code [:<> "n"]] [:<> " is a function, run it and return the value"]]] [:li [:<> [:<> "Otherwise try and parse it, if it's a number then return it; otherwise it's a register key so get the value in that register"]]]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5dtiQ7CC2hE6YZuYsou96Ywe2R57wK"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn number-or-fn [get-cached n]\n  (if (fn? n)\n    (n)\n    (let [n (edn/read-string n)]\n      (if (number? n)\n        n\n        (get-cached (str n))))))", :nextjournal/render-opts {:loc {:line 49, :end-line 55, :column 1, :end-column 33}, :id "solutions.2015.day07/number-or-fn-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5drKi7tfHho176NG2531yAkv2kFWan"} ["h2" {:id "parse-all-the-instructions"} [:<> "Parse all the instructions"]] [:p [:<> "Given a state argument to be initialized here and a cache-retreival function,"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "parse all the instructions and set up the functions to be called later. Since"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "we have to defer execution, we have to use a local atom to ensure that the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "values are correctly captured first then processed."]] [:p [:code [:<> "core.match"]] [:<> " is an absolute godsend for these problems, quite effectively"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "trivialising the parsing we do here. Each instruction has a simple mapping to"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "a bitwise function, "] [:code [:<> "NOT"]] [:<> " needing a small adjustment to handle 16 bit ints."]] [:p [:<> "Lastly we reduce over the instructions and "] [:code [:<> "reset!"]] [:<> " the atom to ensure"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "there's no leftover state and the function is as idempotent as it can be."]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5drKi7tfHho176NG2531yAkv2kFWan"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn parse-instructions [state get-cached instructions]\n  (let [number-or-fn (partial number-or-fn get-cached)]\n    (reset!\n     state\n     (reduce\n      (fn [state instruction]\n        (apply assoc state\n               (match/match [(str/split instruction #\" \")]\n                 [[value \"->\" input]] [input (if (number? (edn/read-string value)) (constantly (number-or-fn value)) #(number-or-fn value))]\n                 [[\"NOT\" input \"->\" output]] [output  #(bit-and-not 16rFFFF (number-or-fn input))]\n                 [[input1 \"OR\" input2 \"->\" output]] [output #(bit-or (number-or-fn input1) (number-or-fn input2))]\n                 [[input1 \"AND\" input2 \"->\" output]] [output #(bit-and (number-or-fn input1) (number-or-fn input2))]\n                 [[input \"LSHIFT\" value \"->\" output]] [output #(bit-shift-left (number-or-fn input) (number-or-fn value))]\n                 [[input \"RSHIFT\" value \"->\" output]] [output #(bit-shift-right (number-or-fn input) (number-or-fn value))])))\n      {}\n      instructions))))", :nextjournal/render-opts {:loc {:line 69, :end-line 84, :column 1, :end-column 23}, :id "solutions.2015.day07/parse-instructions-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5dtR6gb6XPj3iE8sZU7NCxyi1x5UuF"} ["h2" {:id "swap-signal-values"} [:<> "Swap signal values"]] [:p [:<> "Given the instruction lines, the name of a wire and a signal value to swap"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "to; set the new signal."]] [:p [:<> "Also ensure the old version is removed, and pull through the delim"]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5dtR6gb6XPj3iE8sZU7NCxyi1x5UuF"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn swap-signals [lines name value]\n  (let [signal (first (filter #(str/ends-with? % (str \"-> \" name)) lines))\n        [_ delim input] (str/split signal #\" \")]\n    (into\n     (remove (partial = signal) lines)\n     [(str/join \" \" [value delim input])])))", :nextjournal/render-opts {:loc {:line 91, :end-line 96, :column 1, :end-column 45}, :id "solutions.2015.day07/swap-signals-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5dtDuXHA4QwZKyZf3JdYeT8B4NTS6D"} ["h2" {:id "part-1"} [:<> "Part 1"]] [:p [:<> "Part 1 is a simple case of finding the value of "] [:code [:<> "a"]] [:<> ", which is deliberately"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "designed to be very recursive; hence the "] [:em [:<> "need"]] [:<> " to memoize the getter."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Because the only things going into the cached map are functions, we can just"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "call them straight away."]] [:p [:<> "So we initialize the atom, create the cache-retreival function and setup the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "instructions. We can then call the memoized getter to get "] [:code [:<> "a"]] [:<> ", only computing"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "the relevant paths."]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5dtDuXHA4QwZKyZf3JdYeT8B4NTS6D"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-1\n  [input]\n  (let [state (atom {})\n        get-cached (memoize #((get @state (str %1))))]\n    (parse-instructions state get-cached input)\n    (get-cached \"a\")))", :nextjournal/render-opts {:loc {:line 107, :end-line 112, :column 1, :end-column 23}, :id "solutions.2015.day07/part-1-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 3176, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2015.day07/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}}, :nextjournal/blob-id "5dtv7hq9DXeT5gEwYwFmkef3tdwPAp"}, :nextjournal/render-opts {:id "solutions.2015.day07/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5dtEFjcKUpEdVhTisU9PkAjLKevYDp"} ["h2" {:id "part-2"} [:<> "Part 2"]] [:p [:<> "And for part 2, it's identical other than the minor adjustment to the"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "signals. We setup "] [:code [:<> "b"]] [:<> " to be the value from part 1, otherwise this is"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "identical to part 1."]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5dtEFjcKUpEdVhTisU9PkAjLKevYDp"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-2\n  [input]\n  (let [state (atom {})\n        get-cached (memoize #((get @state (str %1))))]\n    (parse-instructions state get-cached (swap-signals input \"b\" (part-1 input)))\n    (get-cached \"a\")))", :nextjournal/render-opts {:loc {:line 123, :end-line 128, :column 1, :end-column 23}, :id "solutions.2015.day07/part-2-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day07/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2015.day07/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 14710, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2015.day07/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}}, :nextjournal/blob-id "5drGwXNfr8MV4DAMV7mYDCLojYSnSs"}, :nextjournal/render-opts {:id "solutions.2015.day07/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}