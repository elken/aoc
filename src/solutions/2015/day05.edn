{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Problem", :emoji nil, :path "#problem", :items []} {:title "Solution", :emoji nil, :path "#solution", :items [{:title "Rules", :emoji nil, :path "#rules", :items [{:title "Has more than 3 occurances of vowels", :emoji nil, :path "#has-more-than-3-occurances-of-vowels", :items []} {:title "Has a letter that occurs more than twice in a row", :emoji nil, :path "#has-a-letter-that-occurs-more-than-twice-in-a-row", :items []} {:title "Doesn't contain a bad string", :emoji nil, :path "#doesn't-contain-a-bad-string", :items []} {:title "Has a pair that appaears more twice without overlapping", :emoji nil, :path "#has-a-pair-that-appaears-more-twice-without-overlapping", :items []} {:title "Has one repeating letter with another letter between it", :emoji nil, :path "#has-one-repeating-letter-with-another-letter-between-it", :items []}]} {:title "Part 1", :emoji nil, :path "#part-1", :items []} {:title "Part 2", :emoji nil, :path "#part-2", :items []}]}], :nextjournal/render-opts {:toc-visibility true, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility true, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns solutions.2015.day05), :file "src/solutions/2015/day05.clj", :scope solutions.2015.day05, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://github.com/elken/aoc/blob/1df7ea72cfc7939069e432ee8dc453db77b05792/src/solutions/2015/day05.clj"} "src/solutions/2015/day05.clj" [:<> "@" [:span.tabular-nums "1df7ea7"]]]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Problem", :description "So at first this one looked quite awkward until I realized everything can be expressed with our lord and saviour; Regular Expressions!"}, :title "Problem", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"} ["h1" {:id "problem"} [:<> "Problem"]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5ds36HZHZS6qM55TdPCvGd8qKTHtED"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:div {:dangerouslySetInnerHTML {:__html "<article class=\"day-desc\"><h2>--- Day 5: Doesn't He Have Intern-Elves For This? ---</h2><p>Santa needs help figuring out which strings in his text file are naughty or nice.</p>\n<p>A <em>nice string</em> is one with all of the following properties:</p>\n<ul>\n<li>It contains at least three vowels (<code>aeiou</code> only), like <code>aei</code>, <code>xazegov</code>, or <code title=\"John Madden John Madden John Madden\">aeiouaeiouaeiou</code>.</li>\n<li>It contains at least one letter that appears twice in a row, like <code>xx</code>, <code>abcdde</code> (<code>dd</code>), or <code>aabbccdd</code> (<code>aa</code>, <code>bb</code>, <code>cc</code>, or <code>dd</code>).</li>\n<li>It does <em>not</em> contain the strings <code>ab</code>, <code>cd</code>, <code>pq</code>, or <code>xy</code>, even if they are part of one of the other requirements.</li>\n</ul>\n<p>For example:</p>\n<ul>\n<li><code>ugknbfddgicrmopn</code> is nice because it has at least three vowels (<code>u...i...o...</code>), a double letter (<code>...dd...</code>), and none of the disallowed substrings.</li>\n<li><code>aaa</code> is nice because it has at least three vowels and a double letter, even though the letters used by different rules overlap.</li>\n<li><code>jchzalrnumimnmhp</code> is naughty because it has no double letter.</li>\n<li><code>haegwjzuvuyypxyu</code> is naughty because it contains the string <code>xy</code>.</li>\n<li><code>dvszwmarrgswjxmb</code> is naughty because it contains only one vowel.</li>\n</ul>\n<p>How many strings are nice?</p>\n</article><article class=\"day-desc\"><h2 id=\"part2\">--- Part Two ---</h2><p>Realizing the error of his ways, Santa has switched to a better model of determining whether a string is naughty or nice.  None of the old rules apply, as they are all clearly ridiculous.</p>\n<p>Now, a nice string is one with all of the following properties:</p>\n<ul>\n<li>It contains a pair of any two letters that appears at least twice in the string without overlapping, like <code>xyxy</code> (<code>xy</code>) or <code>aabcdefgaa</code> (<code>aa</code>), but not like <code>aaa</code> (<code>aa</code>, but it overlaps).</li>\n<li>It contains at least one letter which repeats with exactly one letter between them, like <code>xyx</code>, <code>abcdefeghi</code> (<code>efe</code>), or even <code>aaa</code>.</li>\n</ul>\n<p>For example:</p>\n<ul>\n<li><code>qjhvhtzxzqqjkmpb</code> is nice because is has a pair that appears twice (<code>qj</code>) and a letter that repeats with exactly one letter between them (<code>zxz</code>).</li>\n<li><code>xxyxx</code> is nice because it has a pair that appears twice and a letter that repeats with one between, even though the letters used by each rule overlap.</li>\n<li><code>uurcxstgmygtbstg</code> is naughty because it has a pair (<code>tg</code>) but no repeat with a single letter between them.</li>\n<li><code>ieodomkazucvgmuy</code> is naughty because it has a repeating letter with one between (<code>odo</code>), but no pair that appears twice.</li>\n</ul>\n<p>How many strings are nice under these new rules?</p>\n</article>"}}], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "solutions.2015.day05/anon-expr-5drXLWQ4WyvDWWK9pgQhg9uHRMe4WN-result"}}, :nextjournal/blob-id "5drn6EdTG1nMFUBivpXu9cWnQHwQm8"}, :nextjournal/render-opts {:id "solutions.2015.day05/anon-expr-5drXLWQ4WyvDWWK9pgQhg9uHRMe4WN-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5dsfR5i1z8i3PJbHq8AnCaqdJgegSS"} ["h1" {:id "solution"} [:<> "Solution"]] [:p [:<> "So at first this one looked quite awkward until I realized everything can be expressed with our lord and saviour; "] [:em [:<> "Regular Expressions"]] [:<> "!"]] [:p [:<> "The long and short of this one is given a number of rules, count which"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "strings match each one. The rules will be explained in detail in their"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "relevant functions, but in the general respect both parts are equivalent and"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "you can't generalize a solution (since both parts use different rules)."]] [:p [:<> "First things first, let's load our input and parse it"]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5dsfR5i1z8i3PJbHq8AnCaqdJgegSS"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def input (->> (slurp (io/resource \"inputs/2015/day05.txt\")) ;; Load the resource\n                str/split-lines))                             ;; Split into lines", :nextjournal/render-opts {:loc {:line 24, :end-line 25, :column 1, :end-column 34}, :id "solutions.2015.day05/input-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value [{:path [1 0], :nextjournal/value "zgsnvdmlfuplrubt", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 1], :nextjournal/value "vlhagaovgqjmgvwq", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 2], :nextjournal/value "ffumlmqwfcsyqpss", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 3], :nextjournal/value "zztdcqzqddaazdjp", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 4], :nextjournal/value "eavfzjajkjesnlsb", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 5], :nextjournal/value "urrvucyrzzzooxhx", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 6], :nextjournal/value "xdwduffwgcptfwad", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 7], :nextjournal/value "orbryxwrmvkrsxsr", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 8], :nextjournal/value "jzfeybjlgqikjcow", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 9], :nextjournal/value "mayoqiswqqryvqdi", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 10], :nextjournal/value "iiyrkoujhgpgkcvx", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 11], :nextjournal/value "egcgupjkqwfiwsjl", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 12], :nextjournal/value "zbgtglaqqolttgng", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 13], :nextjournal/value "eytquncjituzzhsx", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 14], :nextjournal/value "dtfkgggvqadhqbwb", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 15], :nextjournal/value "zettygjpcoedwyio", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 16], :nextjournal/value "rwgwbwzebsnjmtln", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 17], :nextjournal/value "esbplxhvzzgawctn", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 18], :nextjournal/value "vnvshqgmbotvoine", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:path [1 19], :nextjournal/value "wflxwmvbhflkqxvo", :nextjournal/viewer {:name nextjournal.clerk.viewer/string-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-quoted-string, :opening-paren "\"", :closing-paren ("\""), :page-size 80, :hash "5dsDiKZaSjZpuyav79P69dRKiDtE2s"}} {:nextjournal/value {:n 20, :path [1], :total 1000, :offset 20}, :nextjournal/viewer {:name nextjournal.clerk.viewer/elision-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-elision, :hash "5drduatKq2QJCDhSX1Pu45i4whSPHk"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/vector-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-coll, :opening-paren "[", :closing-paren ("]"), :page-size 20, :hash "5dsD1KJESfc8Dy8gPeGQfZCX2ayE8f"}, :nextjournal/render-opts {:id "solutions.2015.day05/input-result-1"}}, :nextjournal/blob-id "5dsBUpB7KGbVS72gcSHQ5k8Dp2XNRy"}, :nextjournal/render-opts {:id "solutions.2015.day05/input-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5drtmyHveFN8Q9gbZV48NPyUjYm1XB"} ["h2" {:id "rules"} [:<> "Rules"]] ["h3" {:id "has-more-than-3-occurances-of-vowels"} [:<> "Has more than 3 occurances of vowels"]] [:p [:<> "This is the only one not solved with a "] [:em [:<> "pure"]] [:<> " regex, purely because what I"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "was producing was getting unwieldly and I'd one day like to be able to read"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "it again; so we just match all vowels and count the results."]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5drtmyHveFN8Q9gbZV48NPyUjYm1XB"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn has-vowels? [input]\n  (>= (count (re-seq #\"[aeiou]\" input)) 3))", :nextjournal/render-opts {:loc {:line 34, :end-line 35, :column 1, :end-column 44}, :id "solutions.2015.day05/has-vowels?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5drxoomZhZSZWVHrEJBGLQdPManbqr"} ["h3" {:id "has-a-letter-that-occurs-more-than-twice-in-a-row"} [:<> "Has a letter that occurs more than twice in a row"]] [:p [:<> "Capture any occurance of any single character ("] [:code [:<> "(.)"]] [:<> ") that occurs again next"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "to it (the first capture group "] [:code [:<> "\\1"]] [:<> ") 1 or more times ("] [:code [:<> "+"]] [:<> ")."]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5drxoomZhZSZWVHrEJBGLQdPManbqr"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn has-repeating-letter? [input]\n  (re-find #\"(.)\\1+\" input))", :nextjournal/render-opts {:loc {:line 41, :end-line 42, :column 1, :end-column 29}, :id "solutions.2015.day05/has-repeating-letter?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5dsP3Cg4Tb1S9HtL2jpBmSmTXA1ACi"} ["h3" {:id "doesn't-contain-a-bad-string"} [:<> "Doesn't contain a bad string"]] [:p [:<> "Could be argued that this also isn't "] [:em [:<> "pure"]] [:<> " regex, but who's keeping track."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Check for any occurance of the \"bad\" strings "] [:code [:<> "ab"]] [:<> ", "] [:code [:<> "cd"]] [:<> ", "] [:code [:<> "pq"]] [:<> " and "] [:code [:<> "xy"]] [:<> " and"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "make sure "] [:code [:<> "re-find"]] [:<> " returns "] [:code [:<> "nil"]] [:<> "."]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5dsP3Cg4Tb1S9HtL2jpBmSmTXA1ACi"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn no-bad-strings? [input]\n  (nil? (re-find #\"ab|cd|pq|xy\" input)))", :nextjournal/render-opts {:loc {:line 49, :end-line 50, :column 1, :end-column 41}, :id "solutions.2015.day05/no-bad-strings?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5dreqp6kkDLYSM5T8cGpnrgGb2pEYW"} ["h3" {:id "has-a-pair-that-appaears-more-twice-without-overlapping"} [:<> "Has a pair that appaears more twice without overlapping"]] [:p [:<> "Capture any occurance of 2 characters ("] [:code [:<> "(.{2})"]] [:<> ") with other characters after ("] [:code [:<> ".*"]] [:<> ") then ensure it occurs once"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "more ("] [:code [:<> "\\1"]] [:<> ")"]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5dreqp6kkDLYSM5T8cGpnrgGb2pEYW"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn non-overlapping-pair? [input]\n  (re-find #\"(.{2}).*\\1\" input))", :nextjournal/render-opts {:loc {:line 56, :end-line 57, :column 1, :end-column 33}, :id "solutions.2015.day05/non-overlapping-pair?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5du3kV3oqEio1Knt76nYDQVZj3s1Y8"} ["h3" {:id "has-one-repeating-letter-with-another-letter-between-it"} [:<> "Has one repeating letter with another letter between it"]] [:p [:<> "Capture a single character ("] [:code [:<> "(.)"]] [:<> ") followed by another letter ("] [:code [:<> "[a-z]"]] [:<> ") which"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "is then followed by the first capture ("] [:code [:<> "\\1"]] [:<> ")"]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5du3kV3oqEio1Knt76nYDQVZj3s1Y8"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn repeat-with-letter? [input]\n  (re-find #\"(.)[a-z]\\1\" input))", :nextjournal/render-opts {:loc {:line 63, :end-line 64, :column 1, :end-column 33}, :id "solutions.2015.day05/repeat-with-letter?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5dt5kcXTJ6DQpMiZsCyaUUG5DdSxkS"} ["h2" {:id "part-1"} [:<> "Part 1"]] [:p [:<> "Both parts are identical in that they just apply and count the valid strings,"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "so we can use "] [:code [:<> "every-pred"]] [:<> " to find the \"nice\" strings"]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5dt5kcXTJ6DQpMiZsCyaUUG5DdSxkS"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-1\n  [input]\n  (count\n   (filter (every-pred no-bad-strings? has-repeating-letter? has-vowels?) input)))", :nextjournal/render-opts {:loc {:line 70, :end-line 73, :column 1, :end-column 83}, :id "solutions.2015.day05/part-1-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 238, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2015.day05/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}}, :nextjournal/blob-id "5drGy7Wjt2bzHCX5kK6aHsxMooKunj"}, :nextjournal/render-opts {:id "solutions.2015.day05/anon-expr-5drUsQ22xwHc3Gv6AMNny3M7ZMRamo-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5drtdU5ftxAEuu2zmjHKWmrrvHPeh9"} ["h2" {:id "part-2"} [:<> "Part 2"]] [:p [:<> "And for part 2 we apply different rules with the same outcome"]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5drtdU5ftxAEuu2zmjHKWmrrvHPeh9"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn part-2\n  [input]\n  (count\n   (filter (every-pred non-overlapping-pair? repeat-with-letter?) input)))", :nextjournal/render-opts {:loc {:line 83, :end-line 86, :column 1, :end-column 75}, :id "solutions.2015.day05/part-2-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "solutions.2015.day05/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"} [:p [:<> "Which gives our answer"]]], :nextjournal/render-opts {:id "solutions.2015.day05/markdown-5dspMqxdw3uNK6Pgan8eaYi57sm4wP#2"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value 69, :nextjournal/viewer {:name nextjournal.clerk.viewer/number-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-number, :hash "5dr3R1ZvHCoRHpxsQq4D4ARv9BQC7o"}, :nextjournal/render-opts {:id "solutions.2015.day05/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}}, :nextjournal/blob-id "5dswyfKicKbLHQqaqCx9WDADHHGGKn"}, :nextjournal/render-opts {:id "solutions.2015.day05/anon-expr-5drSLjzJKqUNZcXC2xeU8LJN9ciiDa-result"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}